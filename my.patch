diff --git a/src/gui.rs b/src/gui.rs
index fef7483..bd316be 100644
--- a/src/gui.rs
+++ b/src/gui.rs
@@ -16,9 +16,17 @@ pub struct TelemetryGui {
     can_connected: bool,
 
     // Motor data
-    speed_mph: f64,
+    motor1_speed_rpm: f64,
+    motor2_speed_rpm: f64,
+    motor1_direction: String,
+    motor2_direction: String,
+
+    speed_mph: f64, // This becomes the calculated result
     direction: String,
 
+    motor1_last_update: Option<std::time::Instant>,
+    motor2_last_update: Option<std::time::Instant>,
+
     // BMS data
     bms_data: BmsData,
 
@@ -107,7 +115,14 @@ impl Application for TelemetryGui {
                 can_connected: false,
                 direction: "Neutral".into(),
                 fullscreen: true,
+
+                motor1_speed_rpm: 0.0,
+                motor2_speed_rpm: 0.0,
+                motor1_direction: "Neutral".into(),
+                motor2_direction: "Neutral".into(),
                 speed_mph: 0.0,
+                motor1_last_update: None,
+                motor2_last_update: None,
                 battery_voltage: 0.0,
                 battery_current: 0.0,
                 battery_charge: 0.0,
@@ -181,8 +196,7 @@ impl Application for TelemetryGui {
                     0x330 => "BMS_State",
                     0x340 => "BMS_Capacity",
                     0x360 => "BMS_Temperature",
-                    0x776 => "BPS_System",
-                    0x777 => "BPS_Thing",
+                    0x776 | 0x777 => "BPS_System",
                     0x0 | 0x1 => "MPPT",
                     // Motor Controller 1 (ID ending in 05)
                     id if id == 0x0CF11E05
@@ -409,15 +423,29 @@ impl TelemetryGui {
     // Helper method to update GUI values based on the configuration
     fn update_gui_value(&mut self, gui_value_type: &GuiValueType, value: &str) {
         match gui_value_type {
-            GuiValueType::Speed => {
+            GuiValueType::Motor1Speed => {
                 if let Ok(v) = value.parse::<f64>() {
-                    // Convert RPM to MPH: RPM * wheel_circumference * 60 / 63360
-                    // wheel_circumference = 23.5" * Ï€
-                    self.speed_mph = (v * 23.5 * std::f64::consts::PI * 60.0) / 63360.0;
+                    self.motor1_speed_rpm = v;
+                    self.motor1_last_update = Some(std::time::Instant::now());
+                    // Trigger speed recalculation immediately
+                    self.update_vehicle_speed();
                 }
             }
-            GuiValueType::Direction => {
-                self.direction = value.to_string();
+            GuiValueType::Motor2Speed => {
+                if let Ok(v) = value.parse::<f64>() {
+                    self.motor2_speed_rpm = v;
+                    self.motor2_last_update = Some(std::time::Instant::now());
+                    // Trigger speed recalculation immediately
+                    self.update_vehicle_speed();
+                }
+            }
+            GuiValueType::Motor1Direction => {
+                self.motor1_direction = value.to_string();
+                self.update_vehicle_direction();
+            }
+            GuiValueType::Motor2Direction => {
+                self.motor2_direction = value.to_string();
+                self.update_vehicle_direction();
             }
             GuiValueType::BmsPackDcl => {
                 if let Ok(v) = value.parse::<f64>() {
@@ -567,4 +595,77 @@ impl TelemetryGui {
             });
         }
     }
+
+    fn update_vehicle_speed(&mut self) {
+        // Check data freshness (optional - helps with stale data)
+        let now = std::time::Instant::now();
+        let max_age = std::time::Duration::from_millis(500); // 500ms max age
+
+        let motor1_fresh = self
+            .motor1_last_update
+            .map(|t| now.duration_since(t) < max_age)
+            .unwrap_or(false);
+        let motor2_fresh = self
+            .motor2_last_update
+            .map(|t| now.duration_since(t) < max_age)
+            .unwrap_or(false);
+
+        // Calculate speed using available data
+        let (motor1_rpm, motor2_rpm) = match (motor1_fresh, motor2_fresh) {
+            (true, true) => (self.motor1_speed_rpm, self.motor2_speed_rpm),
+            (true, false) => (self.motor1_speed_rpm, 0.0), // Only motor 1 data is fresh
+            (false, true) => (0.0, self.motor2_speed_rpm), // Only motor 2 data is fresh
+            (false, false) => (0.0, 0.0),                  // No fresh data
+        };
+
+        // Apply your enhanced speed calculation
+        self.speed_mph = self.calculate_dual_motor_speed(motor1_rpm, motor2_rpm);
+    }
+
+    fn calculate_dual_motor_speed(&self, motor1_rpm: f64, motor2_rpm: f64) -> f64 {
+        let min_threshold = 10.0; // Filter noise below 10 RPM
+        let wheel_diameter = 23.5; // Make this configurable later
+
+        // Filter out noise
+        let motor1_filtered = if motor1_rpm.abs() >= min_threshold {
+            motor1_rpm
+        } else {
+            0.0
+        };
+        let motor2_filtered = if motor2_rpm.abs() >= min_threshold {
+            motor2_rpm
+        } else {
+            0.0
+        };
+
+        // Calculate average RPM
+        let avg_rpm = if motor1_filtered != 0.0 && motor2_filtered != 0.0 {
+            (motor1_filtered + motor2_filtered) / 2.0
+        } else if motor1_filtered != 0.0 {
+            motor1_filtered // Only motor 1 active
+        } else if motor2_filtered != 0.0 {
+            motor2_filtered // Only motor 2 active
+        } else {
+            0.0 // No motors active
+        };
+
+        // Convert to MPH
+        let wheel_circumference = wheel_diameter * std::f64::consts::PI;
+        (avg_rpm * wheel_circumference * 60.0) / 63360.0
+    }
+
+    fn update_vehicle_direction(&mut self) {
+        self.direction = match (
+            self.motor1_direction.as_str(),
+            self.motor2_direction.as_str(),
+        ) {
+            ("Forward", "Forward") => "Forward".to_string(),
+            ("Backward", "Backward") => "Backward".to_string(),
+            ("Neutral", "Neutral") => "Neutral".to_string(),
+            ("Forward", "Neutral") | ("Neutral", "Forward") => "Forward".to_string(),
+            ("Backward", "Neutral") | ("Neutral", "Backward") => "Backward".to_string(),
+            ("Forward", "Backward") | ("Backward", "Forward") => "Turning".to_string(),
+            _ => "Mixed".to_string(),
+        };
+    }
 }
diff --git a/src/gui_modules/types.rs b/src/gui_modules/types.rs
index b6d1a18..df048a0 100644
--- a/src/gui_modules/types.rs
+++ b/src/gui_modules/types.rs
@@ -69,14 +69,21 @@ pub const DTC_FLAGS_2_FAULTS: &[(u16, &str)] = &[
 pub fn get_gui_value_mappings() -> HashMap<(&'static str, &'static str), Vec<GuiValueType>> {
     let mut mappings = HashMap::new();
 
-    // Motor data - using MotorController_1 for speed and MotorController_2 for direction
     mappings.insert(
         ("MotorController_1", "Actual_Speed_RPM"),
-        vec![GuiValueType::Speed],
+        vec![GuiValueType::Motor1Speed],
+    );
+    mappings.insert(
+        ("MotorController_2", "Actual_Speed_RPM"),
+        vec![GuiValueType::Motor2Speed],
+    );
+    mappings.insert(
+        ("MotorController_1", "Status_Of_Command"),
+        vec![GuiValueType::Motor1Direction],
     );
     mappings.insert(
         ("MotorController_2", "Status_Of_Command"),
-        vec![GuiValueType::Direction],
+        vec![GuiValueType::Motor2Direction],
     );
 
     // BMS data
@@ -133,8 +140,8 @@ pub fn get_gui_value_mappings() -> HashMap<(&'static str, &'static str), Vec<Gui
         ("BMS_Temperature", "Low_Temperature"),
         vec![GuiValueType::BatteryTempLo],
     );
-    mappings.insert(("BPS_Thing", "BPS_ON_Time"), vec![GuiValueType::BpsOnTime]);
-    mappings.insert(("BPS_Thing", "BPS_State"), vec![GuiValueType::BpsState]);
+    mappings.insert(("BPS_System", "BPS_ON_Time"), vec![GuiValueType::BpsOnTime]);
+    mappings.insert(("BPS_System", "BPS_State"), vec![GuiValueType::BpsState]);
 
     mappings
 }
@@ -142,8 +149,6 @@ pub fn get_gui_value_mappings() -> HashMap<(&'static str, &'static str), Vec<Gui
 // Enum for different GUI value types
 #[derive(Debug, Clone, PartialEq, Eq, Hash)]
 pub enum GuiValueType {
-    Speed,
-    Direction,
     BmsPackDcl,
     BmsPackDclKw,
     BmsPackCcl,
@@ -162,6 +167,10 @@ pub enum GuiValueType {
     BatteryTempLo,
     BpsOnTime,
     BpsState,
+    Motor1Speed,
+    Motor2Speed,
+    Motor1Direction,
+    Motor2Direction,
 }
 
 // Configuration for fault signals - defines which signals in which messages are faults
diff --git a/telemetry.dbc b/telemetry.dbc
index c86ea50..6660b5f 100644
--- a/telemetry.dbc
+++ b/telemetry.dbc
@@ -187,26 +187,13 @@ BO_ 2364612358 MSGID_0X0CF11F06: 8 MotorController_2
  SG_ Controller_Temperature_C : 8|8@1- (1.0,-40) [-40|215] "C" Vector__XXX
  SG_ Throttle_Signal : 0|8@1+ (0.0196,0) [0|5] "V" Vector__XXX
 
-BO_ 512 MSGID_0X200: 8 MPPT
+BO_ 0 MSGID_0X000: 8 MPPT
  SG_ Output_Current_A : 48|16@1- (0.0005,0) [-16.0|16.0] "A" Vector__XXX
  SG_ Output_Voltage_V : 32|16@1- (0.01,0) [-327.0|327.0] "V" Vector__XXX
  SG_ Input_Current_A : 16|16@1- (0.0005,0) [-16.0|16.0] "A" Vector__XXX
  SG_ Input_Voltage_V : 0|16@1- (0.01,0) [-327.0|327.0] "V" Vector__XXX
 
-BO_ 513 MSGID_0X201: 5 MPPT
- SG_ Heatsink_Temperature_C : 32|8@1- (1,0) [-128|127] "C" Vector__XXX
- SG_ Ambient_Temperature_C : 24|8@1- (1,0) [-128|127] "C" Vector__XXX
- SG_ Enabled : 16|8@1+ (1,0) [0|0] "" Vector__XXX
- SG_ MPPT_Fault : 8|8@1+ (1,0) [0|0] "" Vector__XXX
- SG_ Mode : 0|8@1+ (1,0) [0|0] "" Vector__XXX
-
-BO_ 514 MSGID_0X202: 8 MPPT
- SG_ Output_Current_A : 48|16@1- (0.0005,0) [-16.0|16.0] "A" Vector__XXX
- SG_ Output_Voltage_V : 32|16@1- (0.01,0) [-327.0|327.0] "V" Vector__XXX
- SG_ Input_Current_A : 16|16@1- (0.0005,0) [-16.0|16.0] "A" Vector__XXX
- SG_ Input_Voltage_V : 0|16@1- (0.01,0) [-327.0|327.0] "V" Vector__XXX
-
-BO_ 515 MSGID_0X203: 5 MPPT
+BO_ 1 MSGID_0X001: 5 MPPT
  SG_ Heatsink_Temperature_C : 32|8@1- (1,0) [-128|127] "C" Vector__XXX
  SG_ Ambient_Temperature_C : 24|8@1- (1,0) [-128|127] "C" Vector__XXX
  SG_ Enabled : 16|8@1+ (1,0) [0|0] "" Vector__XXX
@@ -219,22 +206,7 @@ BO_ 1910 BPS_Sense: 8 BPS
  SG_ BPS_Voltage : 16|16@1- (0.01,0) [-327.68|327.67] "V" Vector__XXX
  SG_ Low_Voltage_Current : 0|16@1+ (0.01,0) [0|0] "A" Vector__XXX
 
-BO_ 1911 BPS_State: 8 BPS
- SG_ Faulted_Value_2 : 48|16@1+ (0.01,0) [0|0] "" Vector__XXX
- SG_ Faulted_Value_1 : 32|16@1+ (0.01,0) [0|0] "" Vector__XXX
- SG_ BPS_ON_Time : 16|16@1+ (1,0) [0|65535] "seconds" Vector__XXX
- SG_ BPS_State : 13|3@1+ (1,0) [0|0] "" Vector__XXX
- SG_ Estop_Fault : 12|1@1+ (1,0) [0|0] "" Vector__XXX
- SG_ BMS_CAN_Timeout : 11|1@1+ (1,0) [0|0] "" Vector__XXX
- SG_ BMS_CAN_Warning : 10|1@1+ (1,0) [0|0] "" Vector__XXX
- SG_ BMS_CAN_Fault : 9|1@1+ (1,0) [0|0] "" Vector__XXX
- SG_ Precharge_Fault : 8|1@1+ (1,0) [0|0] "" Vector__XXX
- SG_ BPS_Current_Fault : 6|2@1+ (1,0) [0|0] "" Vector__XXX
- SG_ BPS_Main_Pack_Current_Fault : 4|2@1+ (1,0) [0|0] "" Vector__XXX
- SG_ DCDC_Voltage_Fault : 2|2@1+ (1,0) [0|0] "" Vector__XXX
- SG_ Supp_Voltage_Fault : 0|2@1+ (1,0) [0|0] "" Vector__XXX
-
-BO_ 1680 DCS_OUT: 2 DCS
+BO_ 1911 DCS_OUT: 2 DCS
  SG_ Motor_Temperature_Data : 0|16@1+ (1,0) [-32768|32767] "C" Vector__XXX
 
 
@@ -257,13 +229,10 @@ BA_ "GenMsgCycleTime" BO_ 2364612101 50;
 BA_ "GenMsgCycleTime" BO_ 2364612357 50;
 BA_ "GenMsgCycleTime" BO_ 2364612102 50;
 BA_ "GenMsgCycleTime" BO_ 2364612358 50;
-BA_ "GenMsgCycleTime" BO_ 512 500;
-BA_ "GenMsgCycleTime" BO_ 513 1000;
-BA_ "GenMsgCycleTime" BO_ 514 500;
-BA_ "GenMsgCycleTime" BO_ 515 1000;
+BA_ "GenMsgCycleTime" BO_ 0 500;
+BA_ "GenMsgCycleTime" BO_ 1 1000;
 BA_ "GenMsgCycleTime" BO_ 1910 100;
 BA_ "GenMsgCycleTime" BO_ 1911 100;
-BA_ "GenMsgCycleTime" BO_ 1680 100;
 VAL_ 2364612101 MC_ERR15 0 "OK" 1 "Hall Galvanometer sensor" ;
 VAL_ 2364612101 MC_ERR14 0 "OK" 1 "Motor over-temperature" ;
 VAL_ 2364612101 MC_ERR13 0 "OK" 1 "RESERVED" ;
@@ -300,18 +269,7 @@ VAL_ 2364612102 MC_ERR1 0 "OK" 1 "Over voltage" ;
 VAL_ 2364612102 MC_ERR0 0 "OK" 1 "Identification error" ;
 VAL_ 2364612358 Status_Controller 0 "Stationary" 1 "Forward" 2 "Backward" ;
 VAL_ 2364612358 Status_Of_Command 0 "Neutral" 1 "Forward" 2 "Backward" ;
-VAL_ 513 MPPT_Fault 0 "OK" 1 "Configuration Error" 2 "Input Over Voltage" 3 "Output Over Voltage" 4 "Output Over Current" 5 "Input Over Current" 6 "Input Under Current" 7 "Phase Over Current" 8 "General Fault" ;
-VAL_ 515 MPPT_Fault 0 "OK" 1 "Configuration Error" 2 "Input Over Voltage" 3 "Output Over Voltage" 4 "Output Over Current" 5 "Input Over Current" 6 "Input Under Current" 7 "Phase Over Current" 8 "General Fault" ;
-VAL_ 1911 BPS_State 0 "STANDBY" 1 "PRIMARY" 2 "ACCESSORY" 3 "MPPT_CHARGING" 4 "WALL_CHARGING" 5 "FAULT" 6 "RESERVED" 7 "RESERVED" ;
-VAL_ 1911 Estop_Fault 0 "OK" 1 "E-stop Active" ;
-VAL_ 1911 BMS_CAN_Timeout 0 "OK" 1 "BMS Timeout" ;
-VAL_ 1911 BMS_CAN_Warning 0 "OK" 1 "BMS Warning" ;
-VAL_ 1911 BMS_CAN_Fault 0 "OK" 1 "BMS Fault" ;
-VAL_ 1911 Precharge_Fault 0 "OK" 1 "Precharge Fail" ;
-VAL_ 1911 BPS_Current_Fault 0 "OK" 1 "Over Current" 2 "No Current Sensor" 3 "Reserved" ;
-VAL_ 1911 BPS_Main_Pack_Current_Fault 0 "OK" 1 "Charge Current Fault" 2 "Discharge Current Fault" 3 "Reserved" ;
-VAL_ 1911 DCDC_Voltage_Fault 0 "OK" 1 "Under Voltage" 2 "Over Voltage" 3 "Reserved" ;
-VAL_ 1911 Supp_Voltage_Fault 0 "OK" 1 "Under Voltage" 2 "Over Voltage" 3 "Reserved" ;
+VAL_ 1 MPPT_Fault 0 "OK" 1 "Configuration Error" 2 "Input Over Voltage" 3 "Output Over Voltage" 4 "Output Over Current" 5 "Input Over Current" 6 "Input Under Current" 7 "Phase Over Current" 8 "General Fault" ;
 
 
 
